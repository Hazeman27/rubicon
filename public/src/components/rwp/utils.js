export class FilePathRegExp extends RegExp {
	/** @type {string[]} */
	_extensions = [];

	/**
	 * @param {string} pattern the text of the regular expression.
	 * @param {string[]} extensions array of extensions to match. Without preceding dot.
 	 * For example: `js, ts` are valid arguments while `.js, .ts` are not.
	 * @param {string} [flags] if specified, flags is a string that contains the
	 * flags to add.
	 */
	constructor(pattern, extensions, flags) {
		super(pattern, flags);
		this._extensions = extensions;
	}

	get extensions() {
		return this._extensions;
	}
}

/**
 * @param {string[]} extensions
 * @param {string} [separator=|]
 * @returns {string[]}
 */
function _createExtRegExpString(extensions, separator = '|') {
	return extensions.map(extension => `.${extension}`).join(separator);
}

/**
 * @typedef {object} FilePathRegExpOptions
 * @property {string} flags
 * @property {boolean} backslash
 */

/**
 * Generates regular expression that matches path strings with specified file
 * extensions.
 *
 * @param {string[]} extensions array of extensions to match. Without preceding dot.
 * For example: `js, ts` are valid arguments while `.js, .ts` are not.
 * @param {FilePathRegExpOptions} [options]
 * @returns {FilePathRegExp}
 */
export function generateFilePathRegExp(
	extensions,
	{ flags = '', backslash = false } = { flags: '', backslash: false }
) {
	const slash = backslash ? '\\' : '/';

	return new FilePathRegExp(
		`(.*${slash})?(.+)(?=(${_createExtRegExpString(extensions)}))`,
		extensions,
		flags
	);
}

/**
 * @typedef {object} FilePathInfo contains information about the current file path.
 * @property {string} fullPath absolute path to the current file.
 * @property {string} fullPathNoExtension absolute path to the current file without
 * file extension.
 * @property {string} directoryPath absolute path to the current directory.
 * @property {string} fileName name of the current file, no extension.
 * @property {string} fileExtension extension of the current file.
 */

/**
 * @param {string} path
 * @param {FilePathRegExp} regex
 * @returns {FilePathInfo}
 */
export function extractFilePathInfo(path, regex) {
	const [
		fullPathNoExtension,
		directoryPath,
		fileName,
		fileExtension
	] = path.match(regex);

	return {
		fullPath: `${fullPathNoExtension}${fileExtension}`,
		fullPathNoExtension,
		directoryPath,
		fileName,
		fileExtension
	};
}

/**
 * @param {string[]} expectedExtensions array of expected extensions without
 * preceding dot.
 * @param {string} receivedExtension
 */
export function generateFileExtErrorMessages(expectedExtensions, receivedExtension) {
	const extensions = _createExtRegExpString(expectedExtensions, ' or ');
	return [
		'Incorrect file extension!',
		`Expected ${extensions}, but got ${receivedExtension}.`
	];
}

/**
 * Logs error messages generated based on expected and received file types using
 * specified logger function.
 *
 * @param {string} path file path that caused error.
 * @param {FilePathRegExp} regex regular expression used to match file path that
 * was generated by @see generateFilePathRegExp function.
 * @param {(...any)} [logger=console.log] logging function.
 */
export function logFileExtErrorMessages(
	path,
	regex,
	logger = console.error
) {
	const pathInfo = extractFilePathInfo(path, regex);

	generateFileExtErrorMessages(
		regex.extensions,
		pathInfo.fileExtension
	).forEach(logger);
}
